{
  Copyright 2010 Michalis Kamburelis.

  This file is part of "castle".

  "castle" is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  "castle" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with "castle"; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

  ----------------------------------------------------------------------------
}

{ Process 3D castle level just like a castle game would do,
  and then display it. Useful to quickly view a level,
  without running the game.

  This is similar to just opening the level 3D file in view3dscene.
  Except that this will process the 3D file, for example
  adding features expressed in TLevel.ChangeLevelScene post-processing.
  For example, normal maps and GLSL shaders are added to 3D level files
  in this post-processing (because they cannot be generated by Blender
  exporter, after all e.g. normalMap are only Kambi vrml extension.)
  Also, special castle 3d stuff (like level boxes) is interpreted and removed.

  Pass one argument --- level name, e.g. "fountain".
  See ../data/levels/index.xml for valid level names. }

uses SysUtils, KambiUtils, CastleLevel, CastleLevelAvailable, CastleWindow,
  GLWindow, ProgressGL, ProgressUnit, CastleRequiredResources, KambiStringUtils,
  VRMLScene;

var
  LevelName: string;
  Level: TLevel;
begin
  Parameters.CheckHigh(1);
  LevelName := Parameters[1];

  Glw.Init;
  { allow to exit by Escape key }
  Glw.SetDemoOptions(K_None, CharEscape, false);

  { to display nice progress bar }
  ProgressGLInterface.Window := Glw;
  Progress.UserInterface := ProgressGLInterface;

  { Prepare creatures/items:
    actually avoid preparing any creatures, like castle's --debug-no-creatures,
    but stil prepare all items (this goes very fast) }
  ResourcesStrategy := rsDebugKeepOnlyForExistingItems;

  LevelsAvailable.LoadFromFile;
  Level := LevelsAvailable.FindName(LevelName).CreateLevel(luView);
  try
    Glw.Controls.Add(Level);
    Application.Run;
  finally FreeAndNil(Level) end;
end.
