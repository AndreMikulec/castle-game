"The Castle"

--------------------
Installing and running:

Some general notes about command-line options understood by all my
programs are here:
[http://www.camelot.homedns.org/~michalis/common_options.php].

--------------------
Sources:

Compile with simple
  make build-unix
under Unixes (Linux, FreeBSD) or
  make build-win32
under Windows. Note that you must use GNU make. Note that the only
FPC version that I really support is 2.0.2 (although 2.0.0 is probably
also still OK).

I include in this archive all the sources needed to compile the game.
I include also compiled binaries for Linux and Windows, for your comfort.
Also everything needed to tweak with various parts of the game
(e.g. GIMP *.xcf files, that are the "source" version of "png" images,
and Blender's *.blend files that are the "source" version of some "*.wrl" files).

Everything is open source, GNU GPL.

Sources inside units/ subdirectory are not specific to this project.
They are my general units, and together I like to call them
"my 3d game engine" (although there are also many various units that
don't do anything directly related to "3d game engine").
These units are publicly available from my WWW page
[http://www.camelot.homedns.org/~michalis/] ---
see [http://www.camelot.homedns.org/~michalis/sources.php].
Their documentation generated by pasdoc is also available, see
[http://www.camelot.homedns.org/~michalis/sources_docs.php].

Sources specific for this project, "The Castle", are not yet
publicly available from my WWW pages. But they will be published
there at some point (probably right before PGD competition final deadline).

--------------------
Sample level included:

Err... I wanted to prepare in Blender a new shiny first level of my game
(castle_hall), but I didn't make it in time for stage 2 of PGD competition
(I'll probably do it the next day, 2006-02-12 :). So I just placed here
a sample level (basic_castle) that is actually combined from my old demo
castle model, and I added night sky with moon that was used in
my other toy-game (lets_take_a_walk).

Looks good as a demo, but just bear in mind that this basic level is only for
demo purposes, for the next stage it will be replaced with some great
and beautiful and original level created especially for this game.

If you want to see other models demonstrating my engine, see
[http://www.camelot.homedns.org/~michalis/miscella/kambi_vrml_examples.zip]
--- there are many testcases and demos of what can be expressed in VRML 1.0
and what my engine can understand and render. See also
[http://www.camelot.homedns.org/~michalis/view3dscene.php]
that is my VRML 1.0 (and 3DS) viewer based on the same engine as this game.

--------------------
Window size:

For now, the game may run in any resolution, windowed or fullscreen.
By default, it runs in fullscreen using your current screen resolution.

Suggested resolution is 800x600 (this is the resolution
where menu background image will look best).
In the future probably the game will be limited to some particular
resolutions, to ensure that graphics look good.

You can use command-line options described here
[http://www.camelot.homedns.org/~michalis/opengl_options.php]
to force some specific fullscreen or window size. For example:
  castle --fullscreen-custom 800x600
    This will always try to resize your screen resolution to 800x600
    and then run in fullscreen mode.
  castle --geometry 640x480
    This will always run in windowed mode with window size 640x480.

--------------------
Sound:

The game doesn't play any sounds for now, although all the sound engine
using OpenAL is compiled in. Instructions about installing OpenAL
and command-line options related to OpenAL are described here:
[http://www.camelot.homedns.org/~michalis/openal_notes.php].

As a demo that my OpenAL engine can work, see e.g. my old demo program
[http://www.camelot.homedns.org/~michalis/lets_take_a_walk.php].

--------------------
Versioning:

Version numbers are 0.y.z, where "y" is a stage of PGD competition.
So "version 0.2.0" is what I submit at the end of stage 2 of competition.
"z" is a relase number (will be used in later stages when I will want
to give this game to friends to actually test it before submitting to PGD).

Later, when PGD competition will end and I will continue developing
this game on my WWW page [http://www.camelot.homedns.org/~michalis/],
I will switch to my normal versioning scheme
[http://www.camelot.homedns.org/~michalis/versioning.php].

--------------------
Creating levels, 3d objects for this game:

The short instruction is:
Use any 3d modeller able to create VRML 1.0 files.

VRML 1.0 format has an official specification and my engine is capable
of handling any VRML 1.0 valid files (actually, even more than that ---
see [http://www.camelot.homedns.org/~michalis/kambi_vrml_extensions.php]).
So my engine is not tied to any particular modelling program.

My favourite 3d modeller is Blender, [http://www.blender3d.org/].
It's open source, it's available for Linux (yeah, Windows too
if you insist :), and it has an enormous set of features.
Including good export to VRML 1.0, of course. There are no special
rules for designing in Blender models for my engine --- just do whatever
you like (and whatever can be exported to VRML 1.0).

I often "wrap" (using WWWInline VRML construction) models produced by
Blender inside some small VRML files written by hand.
For example, data/castle_hall_final.wrl is a small VRML file that is
maintained by hand. It sets up some things that were uncomfortable
(or impossible, due to lacks of VRML 1.0 exporter) to set up from Blender,
and includes data/castle_hall.wrl (by WWWInline { name "castle_hall.wrl" }).
data/castle_hall.wrl file is simply exported from Blender version
of data/castle_hall.blend.

3DS notes: Actually, you can also export your models to 3DS instead
of VRML 1.0. So if your favourite 3d modeller is not able to export
to VRML 1.0 but it's able to export to 3DS --- you can use it too.
But, since 3DS is a closed format, it will never be supported
completely by my engine (just like by any other program, since everyone
has to decode 3DS). In particular, *everything* that can be expressed
in 3DS format and that is understood by me engine can also be expressed
in VRML 1.0. But not vice-versa, i.e. there are some features that
are available with my engine when using VRML 1.0 but that are not available
when using 3DS. So the bottom line is: well, you can use 3DS format
with my engine, it works OK, but VRML 1.0 format is just better :)

--------------------
Michalis Kamburelis
http://www.camelot.homedns.org/~michalis/index.php
<kambi@users.sourceforge.net> (or <michalis@camelot.homedns.org>)