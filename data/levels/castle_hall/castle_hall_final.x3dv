#X3D V3.2 utf8
PROFILE Interactive

# Camera settings "encoded" in the VRML/X3D declaration below :
# direction -0.0085692862048745 -0.9999632835388184 6.9189518399070948E-006
# up 0.0000328075620928 6.6817710830946453E-006 1
# gravityUp 0 -4.3711388286737929E-008 1
Transform {
  translation 0.1140000000596046 73.34100341796875 1.9902079105377197
  rotation 1 0 0 1.5707963705062866
  children Viewpoint {
    position 0 0 0 # camera position is expressed by translation
    orientation 0.0000404729144066 1 -3.3079807053582044E-006 3.1330232620239258
  }
}

# lights -------------------------------------------------------------------

#   PointLight {
#     ambientIntensity 1
#     location -0.48424467735151117 2.030553575594324 5.9872039198498008
#     color 0.4 0.2 0.2
#     global TRUE
#     radius 100000 # infinity
#   }

#   PointLight {
#     ambientIntensity 1
#     location -11.109210014343262 -36.451499938964844 88.175689697265625
#     color 0.4 0.4 0.4
#     global TRUE
#     radius 100000 # infinity
#   }

#   PointLight {
#     ambientIntensity 1
#     # direction 0 0 1
#     location 0 0 0
#     color 0.8 0.8 0.8
#     global TRUE
#     radius 100000 # infinity
#   }

# This will be used as fake light to determine shadow placement
# when werewolves will appear. It will always stay with on = FALSE.
# The position of this is crucial: it makes the cool effect of
# long shadow legs on the ground when werewolves appear on the level.
DEF FakeShadowPosition PointLight {
  ambientIntensity 1
  location 0 0 1
  on FALSE
  global TRUE
  radius 100000 # infinity
}

PointLight {
  ambientIntensity 1
  location  10  10 100
  color 0.3 0.3 0.3
  shadowVolumes TRUE
  shadowVolumesMain TRUE
  global TRUE
  radius 100000 # infinity
}

PointLight {
  ambientIntensity 1
  location -10 -10 100
  color 0.3 0.3 0.3
  shadowVolumes TRUE
  global TRUE
  radius 100000 # infinity
}

# Add some lights initially turned off, so that the total number
# of lights equals number of werewolves appearing.
PointLight {
  ambientIntensity 1
  on FALSE
  global TRUE
  radius 100000 # infinity
}
PointLight {
  ambientIntensity 1
  on FALSE
  global TRUE
  radius 100000 # infinity
}
PointLight {
  ambientIntensity 1
  on FALSE
  global TRUE
  radius 100000 # infinity
}

# end lights ---------------------------------------------------------------

KambiNavigationInfo {
  avatarSize [ 0.5, 2 ]
  speed 20
  headlight TRUE
  type "WALK"
  headlightNode DirectionalLight {
    ambientIntensity 0.5
    intensity 0.5
    color 1 1 1
  }
}

Transform {
  rotation 1 0 0 1.57
  children Background {
     backUrl "../../skies/stars.jpg"
     bottomUrl "../../skies/stars.jpg"
     frontUrl "../../skies/stars.jpg"
     leftUrl "../../skies/stars.jpg"
     rightUrl "../../skies/stars.jpg"
     topUrl "../../skies/stars.jpg"

#       backUrl "../../skies/sky_back.png"
#       bottomUrl "../../skies/sky_bottom.png"
#       frontUrl "../../skies/sky_front.png"
#       leftUrl "../../skies/sky_left.png"
#       rightUrl "../../skies/sky_right.png"
#       topUrl "../../skies/sky_top.png"

#       backUrl "../../skies/sky_red_back.png"
#       bottomUrl "../../skies/sky_red_bottom.png"
#       frontUrl "../../skies/sky_red_front.png"
#       leftUrl "../../skies/sky_red_left.png"
#       rightUrl "../../skies/sky_red_right.png"
#       topUrl "../../skies/sky_red_top.png"

#       backUrl "../../skies/foggy_sky_back.png"
#       bottomUrl "../../skies/foggy_sky_bottom.png"
#       frontUrl "../../skies/foggy_sky_front.png"
#       leftUrl "../../skies/foggy_sky_left.png"
#       rightUrl "../../skies/foggy_sky_right.png"
#       topUrl "../../skies/foggy_sky_top.png"
  }
}

Inline { url "castle_hall_processed.wrl" }

# hints ----------------------------------------------------------------------

DEF HintButtonBox ProximitySensor {
  center 1.26 0.03 14.08
  size 20.31 6.03 5.23
}
DEF HintButtonBoxScript Script {
  inputOnly SFTime show
  inputOutput SFBool done FALSE
  url "castlescript:
    function show(value, timestamp)
      when (not(done),
        writeln('Hint: press this red button with the ' + shortcut('interact'));
        done := true)
  "
}
ROUTE HintButtonBox.enterTime TO HintButtonBoxScript.show
